trigger: none

variables:
  QDB_LOG_W_FILE_LOCATION: "$(Build.BinariesDirectory)/tests.log"
  ARCHIVED_LOGS: "$(Build.ArtifactStagingDirectory)/questdb-$(Build.SourceBranchName)-$(Build.SourceVersion)-$(System.StageAttempt)-$(Agent.OS)-$(jdk).zip"
  DIFF_CONVER_THRESHOLD_PCT: 50

stages:
  - stage: StartBuildAgent
    displayName: "Start Building Agent"
    condition: always()
    jobs:
      - job: StartArmAgent
        displayName: 'Start ARM Agent'
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: none
          - bash: |
              sudo apt-get update
              sudo apt-get install awscli
              aws autoscaling set-desired-capacity --auto-scaling-group-name ondemand-pipeline-dev --desired-capacity 1
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: eu-west-1
            name: start_agent
            displayName: 'Start ARM build agent'

  - stage: BuildBinaries
    displayName: "Building C++ binaries"
    jobs:
      - job: RunOn
        displayName: "on"
        strategy:
          matrix:
            linux:
              imageName: "ubuntu-latest"
              poolName: "Azure Pipelines"
              os: Linux
              jdk: "1.11"
            mac:
              imageName: "macos-latest"
              poolName: "Azure Pipelines"
              os: macOS
              jdk: "1.11"
            windows:
              imageName: "windows-latest"
              poolName: "Azure Pipelines"
              os: Windows
              jdk: "1.11"            
            linux-arm64:
              imageName:
              poolName: "arm64"
              os: Linux
              jdk: "1.11"
        pool:
          name: $(poolName)
          vmImage: $(imageName)
        timeoutInMinutes: 60
        steps:
          - checkout: self
            fetchDepth: 1
            lfs: false
            submodules: false
          - bash: sudo sysctl -w fs.file-max=500000
            displayName: "Increase file count on Linux"
            condition: eq(variables['Agent.OS'], 'Linux')
          - bash: sudo apt-get install -y nasm
            displayName: "Install NASM Linux"
            condition: eq(variables['Agent.OS'], 'Linux')
          - script: |
              curl.exe -o 7za920.zip https://www.7-zip.org/a/7za920.zip
              mkdir 7zip
              tar -xf 7za920.zip -C 7zip
              curl.exe -o x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z https://kumisystems.dl.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z
              
              start 7zip/7za.exe x x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z
              dir
              cd
              echo "##vso[task.prependpath]%AGENT_BUILDDIRECTORY%\mingw\bin"
              dir %AGENT_BUILDDIRECTORY%\mingw\bin
              path
            displayName: "Install CygWin Windows"
            condition: eq(variables['Agent.OS'], 'Windows_NT')
          - bash: |
              curl https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/macosx/nasm-2.15.05-macosx.zip -o nasm.zip
              unzip nasm.zip && rm -f nasm.zip
              mv nasm* nasm
              echo "##vso[task.prependpath]$(pwd)\nasm"
            displayName: "Install NASM Mac"
            condition: eq(variables['Agent.OS'], 'Darwin')
          - task: CMake@1
            inputs:
              workingDirectory: core
              cmakeArgs: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_DEPENDS_USE_COMPILER=FALSE -G "CodeBlocks - Unix Makefiles"
          - task: CMake@1
            inputs:
              workingDirectory: core
              cmakeArgs: -DCMAKE_BUILD_TYPE=Release -B cmake-build-release -S.
          - task: CMake@1
            inputs:
              workingDirectory: core
              cmakeArgs: --build cmake-build-release --config Release
          # - bash: |
          #     sudo apt-get update
          #     sudo apt-get install build-essential
          #     echo $(pwd)
          #     ls -la
          #     cd core
          #     cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_DEPENDS_USE_COMPILER=FALSE -G "CodeBlocks - Unix Makefiles"
          #     cmake -DCMAKE_BUILD_TYPE=Release -B cmake-build-release -S.
          #     cmake --build cmake-build-release --config Release
          #   displayName: 'Compile OS binary'
          
          # - bash: |
          #     echo "Uploading $(Agent.OS)-$(Agent.OSArchitecture)"
          #     aws s3 cp "$rtLinuxBinSnapshot" s3://questdb/cbinary/ --no-progress
          #   displayName: 'Upload binary'

  - stage: StopBuildAgent
    displayName: "Stop Building Agent"
    condition: always()
    jobs:
      - job: StopArmAgent
        displayName: 'Stop ARM Agent'
        pool:
          vmImage: "ubuntu-latest"
        
        steps:
          - checkout: none
          - bash: echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
            env:
              AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
            displayName: 'Login Azure DevOps Extension'

          - bash: az devops configure --defaults organization=$(System.TeamFoundationCollectionUri) project=$(System.TeamProject) --use-git-aliases true
            displayName: 'Set default Azure DevOps organization and project'
          
          - bash: |
              sudo apt-get update
              sudo apt-get install -y awscli jq
            displayName: 'Install dependecies'
          
          - bash: |
              count=$(az pipelines runs list --pipeline-ids 1 --status inProgress --detect true --project questdb | jq length)
              echo "Running builds: ${count}"
              if [ $count -gt 1 ]; then
                echo "Skipping another build is running in background.."
              else
                echo "Stopping the build agent!"
                aws autoscaling set-desired-capacity --auto-scaling-group-name ondemand-pipeline-dev --desired-capacity 0
              fi
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: eu-west-1
            name: check_if_stop_agent
            displayName: 'Check/stop build agent'